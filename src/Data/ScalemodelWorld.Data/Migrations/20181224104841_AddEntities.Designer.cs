// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScalemodelWorld.Web.Models;

namespace ScalemodelWorld.Data.Migrations
{
    [DbContext(typeof(ScalemodelWorldContext))]
    [Migration("20181224104841_AddEntities")]
    partial class AddEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ScalemodelWorld.Web.Areas.Identity.Data.ScalemodelWorldUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(500);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50);

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Scalemodels.Models.Aftermarket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FactoryNumber");

                    b.Property<int>("ManifacturerId");

                    b.Property<string>("Name");

                    b.Property<int?>("Number");

                    b.Property<decimal?>("Price");

                    b.Property<bool>("Purchased");

                    b.HasKey("Id");

                    b.HasIndex("ManifacturerId");

                    b.ToTable("Aftermarkets");
                });

            modelBuilder.Entity("Scalemodels.Models.Consumable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Coverage");

                    b.Property<DateTime?>("DateOfPurchase");

                    b.Property<int>("ManifacturerId");

                    b.Property<string>("ManifacturerNumber");

                    b.Property<string>("Name");

                    b.Property<decimal?>("Price");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManifacturerId");

                    b.ToTable("Consumables");
                });

            modelBuilder.Entity("Scalemodels.Models.ConsumableCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName");

                    b.HasKey("Id");

                    b.ToTable("ConsumableCategories");
                });

            modelBuilder.Entity("Scalemodels.Models.JunctionClasses.AvailableAftermarket", b =>
                {
                    b.Property<int>("AvailableAftermarketId");

                    b.Property<int>("AvailableScalemodelId");

                    b.Property<int>("Id");

                    b.HasKey("AvailableAftermarketId", "AvailableScalemodelId");

                    b.HasIndex("AvailableScalemodelId");

                    b.ToTable("AvailableAftermarket");
                });

            modelBuilder.Entity("Scalemodels.Models.JunctionClasses.CompletedAftermarket", b =>
                {
                    b.Property<int>("CompletedAftermarketId");

                    b.Property<int>("CompletedScalemodelId");

                    b.Property<int>("Id");

                    b.HasKey("CompletedAftermarketId", "CompletedScalemodelId");

                    b.HasIndex("CompletedScalemodelId");

                    b.ToTable("CompletedAftermarkets");
                });

            modelBuilder.Entity("Scalemodels.Models.JunctionClasses.CompletedScalemodelShowParticipation", b =>
                {
                    b.Property<int>("CompletedScalemodelId");

                    b.Property<int>("ModelshowId");

                    b.Property<int>("Id");

                    b.HasKey("CompletedScalemodelId", "ModelshowId");

                    b.HasIndex("ModelshowId");

                    b.ToTable("CompletedScalemodelShowParticipations");
                });

            modelBuilder.Entity("Scalemodels.Models.JunctionClasses.StartedAftermarket", b =>
                {
                    b.Property<int>("StartedAftermarketId");

                    b.Property<int>("StartedScalemodelId");

                    b.Property<int>("Id");

                    b.HasKey("StartedAftermarketId", "StartedScalemodelId");

                    b.HasIndex("StartedScalemodelId");

                    b.ToTable("StartedAftermarkets");
                });

            modelBuilder.Entity("Scalemodels.Models.Manifacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Manifacturers");
                });

            modelBuilder.Entity("Scalemodels.Models.Modelshows.ModelShow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BestCompanyOffer");

                    b.Property<string>("CombinesWith");

                    b.Property<string>("Comments");

                    b.Property<string>("FactoryNumber")
                        .IsRequired();

                    b.Property<string>("InfoHowTo");

                    b.Property<int>("ManifacturerId");

                    b.Property<string>("ModelShowName");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Number");

                    b.Property<string>("Place");

                    b.Property<decimal>("Price");

                    b.Property<int>("Scale");

                    b.Property<DateTime>("Year");

                    b.HasKey("Id");

                    b.HasIndex("ManifacturerId");

                    b.ToTable("ModelShows");
                });

            modelBuilder.Entity("Scalemodels.Models.Modelshows.ModelShowCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryId");

                    b.Property<string>("CategoryName");

                    b.Property<int>("ModelShowId");

                    b.HasKey("Id");

                    b.HasIndex("ModelShowId");

                    b.ToTable("ModelShowCategory");
                });

            modelBuilder.Entity("Scalemodels.Models.Scalemodels.AvailableScalemodel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BestCompanyOffer");

                    b.Property<string>("CombinesWith");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("DateOfPurchase");

                    b.Property<string>("FactoryNumber")
                        .IsRequired();

                    b.Property<string>("InfoHowTo");

                    b.Property<int>("ManifacturerId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Number");

                    b.Property<string>("Place");

                    b.Property<decimal>("Price");

                    b.Property<int>("Scale");

                    b.HasKey("Id");

                    b.HasIndex("ManifacturerId");

                    b.ToTable("AvailableScalemodels");
                });

            modelBuilder.Entity("Scalemodels.Models.Scalemodels.CompletedScalemodel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BestCompanyOffer");

                    b.Property<string>("CombinesWith");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("DateOfPurchase");

                    b.Property<string>("FactoryNumber")
                        .IsRequired();

                    b.Property<DateTime?>("FinishingDate")
                        .IsRequired();

                    b.Property<string>("ForumsLink");

                    b.Property<string>("GivenSold");

                    b.Property<string>("InfoHowTo");

                    b.Property<int>("ManifacturerId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Number");

                    b.Property<string>("PicturesLink");

                    b.Property<string>("Place");

                    b.Property<decimal>("Price");

                    b.Property<int>("Scale");

                    b.Property<DateTime?>("StartingDate")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ManifacturerId");

                    b.ToTable("CompletedScalemodels");
                });

            modelBuilder.Entity("Scalemodels.Models.Scalemodels.StartedScalemodel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BestCompanyOffer");

                    b.Property<string>("CombinesWith");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("DateOfPurchase");

                    b.Property<string>("FactoryNumber")
                        .IsRequired();

                    b.Property<string>("InfoHowTo");

                    b.Property<int>("ManifacturerId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Number");

                    b.Property<string>("Place");

                    b.Property<decimal>("Price");

                    b.Property<int>("Scale");

                    b.Property<DateTime>("StartingDate");

                    b.HasKey("Id");

                    b.HasIndex("ManifacturerId");

                    b.ToTable("StartedScalemodels");
                });

            modelBuilder.Entity("Scalemodels.Models.Scalemodels.WishScalemodel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BestCompanyOffer");

                    b.Property<string>("CombinesWith");

                    b.Property<string>("Comments");

                    b.Property<string>("FactoryNumber")
                        .IsRequired();

                    b.Property<string>("InfoHowTo");

                    b.Property<int>("ManifacturerId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Number");

                    b.Property<decimal>("Price");

                    b.Property<int>("Scale");

                    b.HasKey("Id");

                    b.HasIndex("ManifacturerId");

                    b.ToTable("WishScalemodels");
                });

            modelBuilder.Entity("Scalemodels.Models.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfPurchase");

                    b.Property<string>("Description");

                    b.Property<int>("ManifacturerId");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.HasIndex("ManifacturerId");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ScalemodelWorld.Web.Areas.Identity.Data.ScalemodelWorldUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ScalemodelWorld.Web.Areas.Identity.Data.ScalemodelWorldUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ScalemodelWorld.Web.Areas.Identity.Data.ScalemodelWorldUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ScalemodelWorld.Web.Areas.Identity.Data.ScalemodelWorldUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Scalemodels.Models.Aftermarket", b =>
                {
                    b.HasOne("Scalemodels.Models.Manifacturer", "Manifacturer")
                        .WithMany("Aftermarkets")
                        .HasForeignKey("ManifacturerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Scalemodels.Models.Consumable", b =>
                {
                    b.HasOne("Scalemodels.Models.ConsumableCategory", "Category")
                        .WithMany("Consumables")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Scalemodels.Models.Manifacturer", "Manifacturer")
                        .WithMany()
                        .HasForeignKey("ManifacturerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Scalemodels.Models.JunctionClasses.AvailableAftermarket", b =>
                {
                    b.HasOne("Scalemodels.Models.Aftermarket", "Aftermarket")
                        .WithMany("AvailableScalemodels")
                        .HasForeignKey("AvailableAftermarketId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Scalemodels.Models.Scalemodels.AvailableScalemodel", "AvailableScalemodel")
                        .WithMany("AvailableAndPurchasedAftermarkets")
                        .HasForeignKey("AvailableScalemodelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Scalemodels.Models.JunctionClasses.CompletedAftermarket", b =>
                {
                    b.HasOne("Scalemodels.Models.Aftermarket", "Aftermarket")
                        .WithMany("CompletedScalemodels")
                        .HasForeignKey("CompletedAftermarketId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Scalemodels.Models.Scalemodels.CompletedScalemodel", "CompletedScalemodel")
                        .WithMany("Aftermarkets")
                        .HasForeignKey("CompletedScalemodelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Scalemodels.Models.JunctionClasses.CompletedScalemodelShowParticipation", b =>
                {
                    b.HasOne("Scalemodels.Models.Scalemodels.CompletedScalemodel", "CompletedScalemodel")
                        .WithMany("ModelShowsParticipatedIn")
                        .HasForeignKey("CompletedScalemodelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Scalemodels.Models.Modelshows.ModelShow", "Modelshow")
                        .WithMany("Participants")
                        .HasForeignKey("ModelshowId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Scalemodels.Models.JunctionClasses.StartedAftermarket", b =>
                {
                    b.HasOne("Scalemodels.Models.Aftermarket", "Aftermarket")
                        .WithMany("StartedScalemodels")
                        .HasForeignKey("StartedAftermarketId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Scalemodels.Models.Scalemodels.StartedScalemodel", "StartedScalemodel")
                        .WithMany("StartAftermarkets")
                        .HasForeignKey("StartedScalemodelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Scalemodels.Models.Modelshows.ModelShow", b =>
                {
                    b.HasOne("Scalemodels.Models.Manifacturer", "Manifacturer")
                        .WithMany()
                        .HasForeignKey("ManifacturerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Scalemodels.Models.Modelshows.ModelShowCategory", b =>
                {
                    b.HasOne("Scalemodels.Models.Modelshows.ModelShow", "ModelShow")
                        .WithMany("Categories")
                        .HasForeignKey("ModelShowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Scalemodels.Models.Scalemodels.AvailableScalemodel", b =>
                {
                    b.HasOne("Scalemodels.Models.Manifacturer", "Manifacturer")
                        .WithMany("AvailableScalemodels")
                        .HasForeignKey("ManifacturerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Scalemodels.Models.Scalemodels.CompletedScalemodel", b =>
                {
                    b.HasOne("Scalemodels.Models.Manifacturer", "Manifacturer")
                        .WithMany("CompletedScalemodels")
                        .HasForeignKey("ManifacturerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Scalemodels.Models.Scalemodels.StartedScalemodel", b =>
                {
                    b.HasOne("Scalemodels.Models.Manifacturer", "Manifacturer")
                        .WithMany("StartedScalemodels")
                        .HasForeignKey("ManifacturerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Scalemodels.Models.Scalemodels.WishScalemodel", b =>
                {
                    b.HasOne("Scalemodels.Models.Manifacturer", "Manifacturer")
                        .WithMany("WishScalemodels")
                        .HasForeignKey("ManifacturerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Scalemodels.Models.Tool", b =>
                {
                    b.HasOne("Scalemodels.Models.Manifacturer", "Manifacturer")
                        .WithMany("Tools")
                        .HasForeignKey("ManifacturerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
